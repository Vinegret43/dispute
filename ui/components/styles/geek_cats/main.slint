import { Wave } from "wave.slint";
import { Button } from "../../widgets/button.slint";
import { SpinBox } from "../../widgets/spinbox.slint";
import { Button as StdButton } from "std-widgets.slint";
import { Status, GlobalState, GlobalCallbacks } from "../../globals.slint";

component Text inherits Text {
    color: white;
    font-family: "04B";
}

global Palette {
    out property<color> background_dark: #341c27;
    out property<color> background_ultra_dark: #140c12;
    out property<color> font_color: #d7b594;
}

export component View inherits Rectangle {

    background: Palette.background_dark;
    Wave {
        y: parent.height / 2 + 50px
         - ((parent.height * ((GlobalState.current_time - GlobalState.timer_start_time) / GlobalState.interval_duration()))
        * (GlobalState.status != Status.Stopped ? 1 : 0));
        animate y {
            duration: 0.4s;
        }
    }
    
    function heading() -> string {
        if (GlobalState.status == Status.Work) {
            return "Working";
        } else if (GlobalState.status == Status.Break) {
            return "Having a break";
        } else if (GlobalState.status == Status.LongBreak) {
            return "Having a long break";
        }
        return "Idle";
    }

    Text {
        y: 120px;
        text: heading();
        font-size: 64px;
    }
    Button {
        x: 32px;
        y: 32px;
        source: @image-url("images/menu.png");
        colorize: Palette.font_color;
        clicked => {
            GlobalState.settings_menu_opened = true;
        }
    }
    StdButton {
        text: GlobalState.status == Status.Stopped ? "Start" : "Stop";
        clicked => {
            if (GlobalState.status == Status.Stopped) {
                GlobalCallbacks.start_timer();
            } else {
                GlobalCallbacks.stop_timer();
            }
        }
    }
}

export component SettingsView inherits Rectangle {
    background: Palette.background_dark;
    GridLayout {
        padding: 32px;
        spacing: 16px;
        Row {
            Button {
                source: @image-url("images/close.png");
                colorize: Palette.font_color;
                clicked => {
                    GlobalState.settings_menu_opened = false;
                }
            }
        }
        Row {
            Text {
                text: "Work minutes";
                font-size: 32px;
                wrap: word-wrap;
            }
            SpinBox {
                background: Palette.background_ultra_dark;
                value: GlobalState.settings.pomodoro_duration / 60s;
                min: 1;
                changed => {
                    GlobalState.settings.pomodoro_duration = self.value * 60s;
                    GlobalCallbacks.settings_update();
                }
            }
        }
        Row {
            Text {
                text: "Rest minutes";
                font-size: 32px;
                wrap: word-wrap;
            }
            SpinBox {
                background: Palette.background_ultra_dark;
                value: GlobalState.settings.short_break_duration / 60s;
                min: 1;
                changed => {
                    GlobalState.settings.short_break_duration = self.value * 60s;
                    GlobalCallbacks.settings_update();
                }
            }
        }
        Row {
            Text {
                text: "Long rest minutes";
                font-size: 32px;
                wrap: word-wrap;
            }
            SpinBox {
                background: Palette.background_ultra_dark;
                value: GlobalState.settings.long_break_duration / 60s;
                min: 1;
                changed => {
                    GlobalState.settings.long_break_duration = self.value * 60s;
                    GlobalCallbacks.settings_update();
                }
            }
        }
        Row {
            Text {
                text: "Pomodoros per cycle";
                font-size: 32px;
                wrap: word-wrap;
            }
            SpinBox {
                max: 20;
                min: 1;
                background: Palette.background_ultra_dark;
                value: GlobalState.settings.pomodoros_in_cycle;
                changed => {
                    GlobalState.settings.pomodoros_in_cycle = self.value;
                    GlobalCallbacks.settings_update();
                }
            }
        }
    }
}
