
import { Palette } from "palette.slint";
import { Button } from "button.slint";
import { GlobalState, GlobalCallbacks, Status } from "../../globals.slint";
import { SevenSegment } from "seven_segment.slint";
import { Segment } from "segment.slint";
import { SettingsView } from "settings.slint";
import { StatusDisplay } from "status.slint";
import { CompletedPomodoros } from "completed_pomodoros.slint";

component Button inherits Button {
    button_down => {
        GlobalCallbacks.play_click_down_sound();
    }
    button_up => {
        GlobalCallbacks.play_click_up_sound();
    }
}

export component View inherits Rectangle {
    init => {
        fs.focus();
    }

    property<bool> settings_opened: false;
    background: Palette.background;

    // Start/stop buttons
    Rectangle {
        y: parent.height - 120px;
        property<length> margin: 96px;
        width: button.width * 2 + margin;
        height: button.height;
        button := Button {
            x: 0px;
            movable_part: @image-url("images/start_movable.png");
            stationary_part: @image-url("images/button_stationary.png");
            upscaling_factor: 6;
            stick: GlobalState.status != Status.Stopped && !GlobalState.paused;
            clicked => {
                if (GlobalState.status == Status.Stopped || GlobalState.paused) {
                    GlobalCallbacks.start_timer();
                }
            }
        }

        Button {
            x: button.width + margin;
            movable_part: @image-url("images/stop_movable.png");
            stationary_part: @image-url("images/button_stationary.png");
            upscaling_factor: 6;
            stick: GlobalState.status == Status.Stopped;
            clicked => {
                if (GlobalState.status != Status.Stopped) {
                    GlobalCallbacks.stop_timer();
                }
            }
        }
    }

    timer := Rectangle {
        height: seg.height;
        HorizontalLayout {
            pure function remaining_time(current_time: duration) -> duration {
                return GlobalState.timer_start_time
                    + GlobalState.interval_duration()
                    - current_time;
            }
            spacing: 18px;
            alignment: center;
            seg := SevenSegment {
                upscaling_factor: 6;
                digit: GlobalState.status == Status.Stopped ? 0 : remaining_time(GlobalState.current_time) / 1s / 60 / 10;
            }
            SevenSegment {
                upscaling_factor: 6;
                digit: GlobalState.status == Status.Stopped ? 0 : Math.mod(remaining_time(GlobalState.current_time) / 1s / 60, 10);
            }
            Rectangle {
                Segment {
                    movable_part: @image-url("images/column_moving.png");
                    stationary_part: @image-url("images/column_stationary.png");
                    active: true;
                    move_pixels: 1px;
                    upscaling_factor: 6;
                }
            }
            SevenSegment {
                upscaling_factor: 6;
                digit: GlobalState.status == Status.Stopped ? 0 : Math.mod(remaining_time(GlobalState.current_time) / 1s, 60) / 10;
            }
            SevenSegment {
                upscaling_factor: 6;
                digit: GlobalState.status == Status.Stopped ? 0 : Math.mod(Math.mod(remaining_time(GlobalState.current_time) / 1s, 60), 10);
            }
        }
    }

    StatusDisplay {
        y: timer.y - self.height - 24px;
        scaling_factor: 6;
    }

    if GlobalState.settings.show_completed_pomodoros : CompletedPomodoros {
        y: timer.y + timer.height + 10px;
        completed: GlobalState.pomodoros_completed;
    }

    // Settings drawer
    Rectangle {
        background: Palette.background;
        visible: self.x != -parent.width;
        settings_view := SettingsView {
            y: 90px;
        }
        states [
            open when settings_opened : {
                x: 0;
                in {
                    animate x {
                        duration: 0.15s;
                        easing: ease-out;
                    }
                }
            }
            closed when ! settings_opened : {
                x: -parent.width;
                in {
                    animate x {
                        duration: 0.15s;
                        easing: ease-out;
                    }
                }
            }
        ]
    }

    // Settings open/close button
    Button {
        x: 24px;
        y: 24px;
        movable_part: settings_opened ? @image-url("images/close_movable.png") : @image-url("images/settings_movable.png");
        stationary_part: @image-url("images/button_stationary.png");
        upscaling_factor: 6;
        clicked => {
            settings_opened = !settings_opened;
            if (!settings_opened) {
                fs.focus();
            }
        }
    }

    fs := FocusScope {
        key-pressed(key) => {
            if (key.text == " " && !settings_opened) {
                if (GlobalState.status == Status.Stopped) {
                    GlobalCallbacks.start_timer();
                } else {
                    GlobalCallbacks.stop_timer();
                }
                return EventResult.accept;
            }
            if (key.text == "s") {
                settings-opened = !settings-opened;
                return EventResult.accept;
            }
            return EventResult.reject;
        }
    }
}
